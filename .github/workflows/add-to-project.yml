---
name: Add Issues and PRs to Project
'on':
  issues:
    types: [opened, reopened, labeled]
  pull_request_target:
    types: [opened, reopened, ready_for_review, converted_to_draft, labeled]
permissions:
  pull-requests: read
  issues: read
  contents: read
jobs:
  add_to_project:
    runs-on: ubuntu-latest
    env:
      ADD_TO_PROJECT_PAT: ${{ secrets.ADD_TO_PROJECT_PAT }}
    steps:
      - name: Add item to Project
        id: add
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/IAmJonoBo/projects/2
          github-token: ${{ env.ADD_TO_PROJECT_PAT }}

      - name: Set Project Status to Triage
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.ADD_TO_PROJECT_PAT }}
          script: |
            const login = 'IAmJonoBo';
            const number = 2;
            const STATUS_TYPE = 'ProjectV2SingleSelectField';
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const isIssue = context.eventName === 'issues';
            const isPR = context.eventName === 'pull_request_target';
            const contentNumber = isIssue
              ? context.payload.issue?.number
              : context.payload.pull_request?.number;
            if (!contentNumber) {
              core.info('No content number found; skipping field update.');
              return;
            }

            // Resolve content node ID (Issue or PR)
            const contentQuery = isIssue
              ? `query($owner:String!,$repo:String!,$num:Int!){
                  repository(owner:$owner,name:$repo){
                    issue(number:$num){
                      id
                    }
                  }
                }`
              : `query($owner:String!,$repo:String!,$num:Int!){
                  repository(owner:$owner,name:$repo){
                    pullRequest(number:$num){
                      id
                    }
                  }
                }`;
            const contentRes = await github.graphql(contentQuery, {
              owner,
              repo,
              num: contentNumber,
            });
            const contentId = isIssue
              ? contentRes.repository?.issue?.id
              : contentRes.repository?.pullRequest?.id;
            if (!contentId) {
              core.info('Could not resolve content node ID; skipping.');
              return;
            }

            // Fetch project and fields
            const projRes = await github.graphql(
              `query($login: String!, $number: Int!) {
                user(login: $login) {
                  projectV2(number: $number) {
                    id
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          __typename
                          ... on Issue { id }
                          ... on PullRequest { id }
                        }
                      }
                    }
                    fields(first: 50) {
                      nodes {
                        __typename
                        ... on ProjectV2FieldCommon { id name }
                        ... on ProjectV2SingleSelectField { id name options { id name } }
                      }
                    }
                  }
                }
              }`,
              { login, number }
            );

            const project = projRes.user?.projectV2;
            if (!project) {
              core.warning('Project not found; cannot set Status field.');
              return;
            }

            // Find the project item that matches this content
            const itemNode = project.items.nodes.find((n) => {
              const c = n.content;
              if (!c) return false;
              if (c.__typename === 'Issue') return c.id === contentId;
              if (c.__typename === 'PullRequest') return c.id === contentId;
              return false;
            });
            if (!itemNode) {
              core.info('Project item not found for this content; skipping.');
              return;
            }
            const itemId = itemNode.id;

            const statusField = project.fields.nodes.find((f) => {
              return f.name === 'Status' && f.__typename === STATUS_TYPE;
            });
            if (!statusField) {
              const msg1 = "Status field not found; skipping set to 'Triage'. ";
              const msg2 = 'Run scripts/setup-project.sh to create it.';
              core.info(msg1 + msg2);
              return;
            }

            const triage = statusField.options.find((o) => o.name === 'Triage');
            if (!triage) {
              core.info("'Triage' option not found on Status field; skipping.");
              return;
            }

            await github.graphql(
              `mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) { clientMutationId }
              }`,
              {
                projectId: project.id,
                itemId,
                fieldId: statusField.id,
                optionId: triage.id,
              }
            );
            core.info("Set Project 'Status' to 'Triage'.");
