---
name: CI
'on':
  push:
    branches: [main]
  pull_request:
    branches: [main]
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.ref || github.ref }}
  cancel-in-progress: true
permissions:
  contents: read
jobs:
  build-pr:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Lint GitHub Actions workflows
        uses: raven-actions/actionlint@v2
        with:
          fail-on-error: true
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy,rustfmt
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            rust-backend
            src-tauri
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install workspace dependencies (root)
        run: |
          pnpm install --frozen-lockfile
      - name: Install Trunk CLI
        run: |
          curl -fsSL https://get.trunk.io -o install-trunk.sh
          bash "install-trunk.sh" -y
          echo "$HOME/.trunk/bin" >> "$GITHUB_PATH"
      - name: Install system dependencies
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential pkg-config libssl-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # macOS already has necessary tools
            echo "macOS dependencies already available"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows dependencies handled by setup actions
            echo "Windows dependencies handled by setup actions"
          fi
      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-
      - name: Install cargo tools
        shell: bash
        run: |
          if ! command -v just &> /dev/null; then
            cargo install just
          fi
          if ! command -v mdbook &> /dev/null; then
            cargo install mdbook
          fi
          if ! command -v cargo-deny &> /dev/null; then
            cargo install cargo-deny
          fi
      - name: Run Trunk code quality checks
        run: trunk check --all --no-progress
      - name: Log Fast Downward SHA-256
        run: |
          bash scripts/log_fast_downward_sha256.sh
          cat fast_downward.sha256 || true
      - name: Install UI dependencies
        run: |
          cd stack-ui
          pnpm install
      - name: Typecheck UI (TypeScript)
        run: |
          pnpm --filter stack-ui run typecheck
      - name: Build UI
        run: |
          cd stack-ui
          pnpm build
      - name: Build backend
        run: |
          cargo build --workspace --all-targets
      - name: Run tests
        run: |
          cargo test --workspace --all-targets
      - name: Lint docs
        run: |
          cd docs
          mdbook build
          mdbook test
      - name: Run Axe-core accessibility check
        continue-on-error: true
        run: |
          if [ -d "stack-ui/dist" ]; then
            npx @axe-core/cli "file://$PWD/stack-ui/dist/index.html" --exit
          else
            echo "Warning: stack-ui/dist directory not found, skipping check"
            exit 1
          fi
      - name: Run dep-scan
        if: ${{ github.event_name == 'push' }}
        run: |
          npx dep-scan --src . \
            --report-format sarif \
            --fail-on-severity HIGH,CRITICAL
      - name: Run cargo-deny
        if: ${{ github.event_name == 'push' }}
        run: |
          cargo \
            deny \
            check
  build-push:
    if: ${{ github.event_name == 'push' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
    steps:
      - uses: actions/checkout@v4
      - name: Lint GitHub Actions workflows
        uses: raven-actions/actionlint@v2
        with:
          fail-on-error: true
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy,rustfmt
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            rust-backend
            src-tauri
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
      - name: Install workspace dependencies (root)
        run: |
          pnpm install --frozen-lockfile
      - name: Install Trunk CLI
        run: |
          curl -fsSL https://get.trunk.io -o install-trunk.sh
          bash "install-trunk.sh" -y
          echo "$HOME/.trunk/bin" >> "$GITHUB_PATH"
      - name: Install system dependencies
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential pkg-config libssl-dev
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            # macOS already has necessary tools
            echo "macOS dependencies already available"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows dependencies handled by setup actions
            echo "Windows dependencies handled by setup actions"
          fi
      - name: Cache cargo tools
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-
      - name: Install cargo tools
        shell: bash
        run: |
          if ! command -v just &> /dev/null; then
            cargo install just
          fi
          if ! command -v mdbook &> /dev/null; then
            cargo install mdbook
          fi
          if ! command -v cargo-deny &> /dev/null; then
            cargo install cargo-deny
          fi
      - name: Run Trunk code quality checks
        run: trunk check --all --no-progress
      - name: Log Fast Downward SHA-256
        run: |
          bash scripts/log_fast_downward_sha256.sh
          cat fast_downward.sha256 || true
      - name: Install UI dependencies
        run: |
          cd stack-ui
          pnpm install
      - name: Typecheck UI (TypeScript)
        run: |
          pnpm --filter stack-ui run typecheck
      - name: Build UI
        run: |
          cd stack-ui
          pnpm build
      - name: Build backend
        run: |
          cargo build --workspace --all-targets
      - name: Run tests
        run: |
          cargo test --workspace --all-targets
      - name: Lint docs
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          cd docs
          mdbook build
          mdbook test
      - name: Run Axe-core accessibility check
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          if [ -d "stack-ui/dist" ]; then
            npx @axe-core/cli "file://$PWD/stack-ui/dist/index.html" --exit
          else
            echo "Warning: stack-ui/dist directory not found, skipping check"
            exit 1
          fi
      - name: Run dep-scan
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          npx dep-scan --src . \
            --report-format sarif \
            --fail-on-severity HIGH,CRITICAL
      - name: Run cargo-deny
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          cargo \
            deny \
            check
      - name: Link Checker (Lychee)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: lycheeverse/lychee-action@v1
        with:
          args: --config lychee.toml '**/*.md'
          fail: true
      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            target/
            stack-ui/dist/
